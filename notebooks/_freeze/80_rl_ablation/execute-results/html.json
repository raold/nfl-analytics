{
  "hash": "3094f60d9a147937bcae0598cad1381a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"80 – RL vs Stateless Baseline Ablation\"\nformat:\n  html:\n    code-fold: true\nexecute-dir: project\nexecute:\n  echo: true\n  warning: false\n  message: false\nparams:\n  seasons: [2020, 2021, 2022, 2023, 2024]\n  output_dir: \"analysis/dissertation/figures/out\"\n---\n\n## Goal\nCompare RL policy against a stateless Kelly-LCB baseline; report Brier/CLV/ROI/Max DD and utilization-adjusted Sharpe. Also provide sensitivity to pessimism level alpha.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(knitr)\ndir.create(params$output_dir, recursive = TRUE, showWarnings = FALSE)\n\n# Try to read evaluation logs; else write placeholders.\nread_if_exists <- function(path) {\n  if (file.exists(path)) readr::read_csv(path, show_col_types = FALSE) else NULL\n}\n\nrl_log  <- read_if_exists(\"analysis/results/rl_eval.csv\")\nbl_log  <- read_if_exists(\"analysis/results/baseline_eval.csv\")\n\nif (!is.null(rl_log) && !is.null(bl_log)) {\n  # Expect columns: season, week, brier, clv_bps, roi_pct, ret_weekly, active\n  agg <- function(df, name) {\n    df |>\n      filter(season %in% params$seasons) |>\n      summarise(\n        Policy = name,\n        Brier = mean(brier, na.rm = TRUE),\n        CLV_bps = mean(clv_bps, na.rm = TRUE),\n        ROI_pct = 100 * mean(roi_pct/100, na.rm = TRUE),\n        Max_DD_pct = 100 * max(cummax(pmax(0, -cummin(coalesce(ret_weekly, 0)))), na.rm = TRUE)\n      )\n  }\n  out <- dplyr::bind_rows(agg(bl_log, \"Kelly-LCB (CBV>tau)\"), agg(rl_log, \"RL (IQL)\"))\n  writeLines(knitr::kable(out, format = \"latex\", booktabs = TRUE,\n                          caption = \"RL vs stateless baseline (2020–2024).\",\n                          col.names = c(\"Policy\", \"Brier\", \"CLV (\\\\%)\", \"ROI (\\\\%)\", \"Max DD (\\\\%)\")),\n             con = file.path(params$output_dir, \"rl_vs_baseline_table.tex\"))\n} else {\n  rl_vs <- data.frame(\n    Policy = c(\"Kelly-LCB (CBV>tau)\", \"RL (IQL)\"),\n    Brier = NA_real_, CLV_bps = NA_real_, ROI_pct = NA_real_, Max_DD_pct = NA_real_\n  )\n  writeLines(knitr::kable(rl_vs, format = \"latex\", booktabs = TRUE,\n                          caption = \"RL vs stateless baseline (placeholder).\",\n                          col.names = c(\"Policy\", \"Brier\", \"CLV (bps)\", \"ROI (\\\\%)\", \"Max DD (\\\\%)\")),\n             con = file.path(params$output_dir, \"rl_vs_baseline_table.tex\"))\n}\n\n# Alpha sensitivity panel placeholder (replace with real plot if available)\npng(file.path(params$output_dir, \"alpha_sensitivity_panel.png\"), width = 900, height = 450)\nplot.new(); text(0.5, 0.5, \"Placeholder: Alpha sensitivity (0.05 vs 0.10)\")\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Utilization-adjusted Sharpe placeholder (compute when weekly returns and active weeks are available)\nutil <- data.frame(Policy = c(\"Kelly-LCB\", \"RL\"), Sharpe_active = NA_real_, Weeks_active = NA_real_, Sharpe_util = NA_real_)\nwriteLines(knitr::kable(util, format = \"latex\", booktabs = TRUE,\n                        caption = \"Utilization-adjusted Sharpe (placeholder).\"),\n           con = file.path(params$output_dir, \"utilization_adjusted_sharpe_table.tex\"))\n\n# CVaR benchmark placeholder (replace with actual benchmark table if present)\ncvar <- data.frame(n = 100, B = 10000, solver = \"OSQP\", time_sec = NA_real_)\nwriteLines(knitr::kable(cvar, format = \"latex\", booktabs = TRUE,\n                        caption = \"CVaR sizing benchmark (placeholder).\"),\n           con = file.path(params$output_dir, \"cvar_benchmark_table.tex\"))\n```\n:::\n\n## OPE Gate (SNIS/DR) — scaffold\n::: {.cell}\n\n```{.r .cell-code}\nsuppressWarnings({ has_jsonlite <- requireNamespace(\"jsonlite\", quietly = TRUE) })\nif (has_jsonlite) {\n  # Build minimal logged dataset and run OPE gate\n  csv_path <- file.path(\"data\", \"rl_logged.csv\")\n  json_path <- file.path(\"analysis\", \"reports\", \"ope_gate.json\")\n  dir.create(dirname(json_path), recursive = TRUE, showWarnings = FALSE)\n  # Attempt to build dataset and run gate via Python scripts\n  try(system2(\"python\", c(\"py/rl/dataset.py\", \"--output\", csv_path, \"--season-start\", min(params$seasons), \"--season-end\", max(params$seasons))), silent = TRUE)\n  try(system2(\"python\", c(\"py/rl/ope_gate.py\", \"--dataset\", csv_path, \"--output\", json_path)), silent = TRUE)\n  if (file.exists(json_path)) {\n    res <- jsonlite::fromJSON(json_path)\n    grid <- do.call(rbind, lapply(names(res$grid), function(k) data.frame(key = k, t(res$grid[[k]]))))\n    names(grid) <- c(\"Key\", \"SNIS\", \"DR\", \"ESS\")\n    grid$SNIS <- round(grid$SNIS, 4)\n    grid$DR   <- round(grid$DR, 4)\n    grid$ESS  <- round(grid$ESS, 1)\n    writeLines(knitr::kable(grid, format = \"latex\", booktabs = TRUE,\n                            caption = sprintf(\"OPE grid (median DR=%.3f, stable=%s)\", res$median_dr, res$stable)),\n               con = file.path(params$output_dir, \"ope_grid_table.tex\"))\n  }\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
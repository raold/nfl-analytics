"""
CVaR report emitter.

Loads the JSON output from py/risk/cvar_lp.py (stakes, cvar, alpha) and
writes a small TeX table summarizing alpha, CVaR, sum of stakes (budget use),
and number of positions. Optionally merges multiple JSONs to produce a panel.

Usage:
  python py/risk/cvar_report.py --json analysis/reports/cvar_stakes.json \
    --tex analysis/dissertation/results/cvar_benchmark_table.tex

  # Multiple runs:
  python py/risk/cvar_report.py --json analysis/reports/cvar_a95.json \
    --json analysis/reports/cvar_a90.json \
    --tex analysis/dissertation/results/cvar_benchmark_table.tex
"""
from __future__ import annotations

import argparse
import json
import os
from typing import List, Dict, Any


def parse_args() -> argparse.Namespace:
    ap = argparse.ArgumentParser(description="Emit CVaR benchmark TeX table from JSONs")
    ap.add_argument("--json", action="append", required=True, help="Path to cvar_lp JSON (repeatable)")
    ap.add_argument("--tex", required=True, help="Output TeX table path")
    return ap.parse_args()


def load_json(path: str) -> Dict[str, Any]:
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)


def main() -> None:
    args = parse_args()
    rows = []
    for p in args.json:
        obj = load_json(p)
        alpha = float(obj.get("alpha", 0.95))
        cvar = float(obj.get("cvar", 0.0))
        stakes = obj.get("stakes", [])
        total_stake = sum(float(x) for x in stakes)
        n = len(stakes)
        rows.append((alpha, cvar, total_stake, n, os.path.basename(p)))

    # Sort by alpha descending then filename
    rows.sort(key=lambda r: (-r[0], r[4]))

    os.makedirs(os.path.dirname(args.tex), exist_ok=True)
    with open(args.tex, "w", encoding="utf-8") as f:
        f.write("% Auto-generated by py/risk/cvar_report.py\n")
        f.write("\\begin{table}[t]\n  \\centering\n  \\small\n  ")
        f.write("\\begin{threeparttable}\n    ")
        f.write("\\caption[CVaR benchmark]{CVaR benchmark summary by run: level $\\alpha$, CVaR, budget use (sum of stakes), and number of positions.}\n")
        f.write("\\label{tab:cvar-benchmark}\n    ")
        f.write("\\begin{tabularx}{\\linewidth}{@{} r r r r l @{} }\\toprule\n")
        f.write("$\\alpha$ & CVaR & Budget use & N pos & Run \\\\ \\midrule\n")
        for alpha, cvar, total, n, name in rows:
            f.write(f"{alpha:.2f} & {cvar:.4f} & {total:.3f} & {n:d} & {name} \\\\ \n")
        f.write("\\bottomrule\\end{tabularx}\n  ")
        f.write("\\end{threeparttable}\n\\end{table}\n")
    print(f"[cvar-report] wrote {len(rows)} rows -> {args.tex}")


if __name__ == "__main__":
    main()


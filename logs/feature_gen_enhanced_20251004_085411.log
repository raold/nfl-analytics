/Users/dro/rice/nfl-analytics/py/features/asof_features_enhanced.py:215: UserWarning: pandas only supports SQLAlchemy connectable (engine/connection) or database string URI or sqlite3 DBAPI2 connection. Other DBAPI2 objects are not tested. Please consider using SQLAlchemy.
  return pd.read_sql(SQL_TEAM_BASE_ENHANCED, conn)
=== Enhanced As-Of Feature Generation ===
Connecting to database...
Fetching team-game data with enhanced metrics...
Traceback (most recent call last):
  File "/Users/dro/rice/nfl-analytics/.venv/lib/python3.13/site-packages/pandas/io/sql.py", line 2664, in execute
    cur.execute(sql, *args)
    ~~~~~~~~~~~^^^^^^^^^^^^
  File "/Users/dro/rice/nfl-analytics/.venv/lib/python3.13/site-packages/psycopg/cursor.py", line 97, in execute
    raise ex.with_traceback(None)
psycopg.errors.UndefinedFunction: operator does not exist: boolean = integer
LINE 66:            COALESCE(AVG(CASE WHEN pass = 1 THEN air_yards EN...
                                                ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/Users/dro/rice/nfl-analytics/py/features/asof_features_enhanced.py", line 427, in <module>
    main()
    ~~~~^^
  File "/Users/dro/rice/nfl-analytics/py/features/asof_features_enhanced.py", line 389, in main
    team_df = fetch_team_game_features(conn)
  File "/Users/dro/rice/nfl-analytics/py/features/asof_features_enhanced.py", line 215, in fetch_team_game_features
    return pd.read_sql(SQL_TEAM_BASE_ENHANCED, conn)
           ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/dro/rice/nfl-analytics/.venv/lib/python3.13/site-packages/pandas/io/sql.py", line 708, in read_sql
    return pandas_sql.read_query(
           ~~~~~~~~~~~~~~~~~~~~~^
        sql,
        ^^^^
    ...<6 lines>...
        dtype=dtype,
        ^^^^^^^^^^^^
    )
    ^
  File "/Users/dro/rice/nfl-analytics/.venv/lib/python3.13/site-packages/pandas/io/sql.py", line 2728, in read_query
    cursor = self.execute(sql, params)
  File "/Users/dro/rice/nfl-analytics/.venv/lib/python3.13/site-packages/pandas/io/sql.py", line 2676, in execute
    raise ex from exc
pandas.errors.DatabaseError: Execution failed on sql '
WITH team_games AS (
    SELECT g.game_id,
           g.season,
           g.week,
           g.kickoff,
           g.home_team AS team,
           TRUE AS is_home,
           g.home_team,
           g.away_team,
           g.home_score,
           g.away_score,
           g.spread_close,
           g.total_close,
           g.home_score AS points_for,
           g.away_score AS points_against,
           g.stadium,
           g.roof,
           g.surface,
           g.home_qb_id AS qb_id,
           g.home_qb_name AS qb_name,
           g.home_coach AS coach_name,
           g.home_turnovers AS turnovers,
           g.away_turnovers AS turnovers_opp,
           g.home_penalties AS penalties,
           g.home_penalty_yards AS penalty_yards
    FROM games g
    UNION ALL
    SELECT g.game_id,
           g.season,
           g.week,
           g.kickoff,
           g.away_team AS team,
           FALSE AS is_home,
           g.home_team,
           g.away_team,
           g.home_score,
           g.away_score,
           g.spread_close,
           g.total_close,
           g.away_score AS points_for,
           g.home_score AS points_against,
           g.stadium,
           g.roof,
           g.surface,
           g.away_qb_id AS qb_id,
           g.away_qb_name AS qb_name,
           g.away_coach AS coach_name,
           g.away_turnovers AS turnovers,
           g.home_turnovers AS turnovers_opp,
           g.away_penalties AS penalties,
           g.away_penalty_yards AS penalty_yards
    FROM games g
),
team_stats AS (
    SELECT game_id,
           posteam AS team,
           -- Base metrics
           COALESCE(SUM(epa), 0) AS epa_sum,
           COUNT(*) AS plays,
           
           -- Success rate (EPA > 0)
           COALESCE(AVG(CASE WHEN success = 1 THEN 1.0 ELSE 0.0 END), 0) AS success_rate,
           
           -- Passing efficiency
           COALESCE(AVG(CASE WHEN pass = 1 THEN air_yards END), 0) AS air_yards_mean,
           COALESCE(AVG(CASE WHEN pass = 1 THEN yards_after_catch END), 0) AS yac_mean,
           COALESCE(AVG(CASE WHEN pass = 1 THEN cpoe END), 0) AS cpoe_mean,
           COALESCE(AVG(CASE WHEN pass = 1 AND complete_pass = 1 THEN 1.0 ELSE 0.0 END), 0) AS completion_pct,
           
           -- Win probability
           COALESCE(MAX(wp), 0.5) AS wp_max,
           COALESCE(MIN(wp), 0.5) AS wp_min,
           COALESCE(AVG(CASE WHEN quarter = 4 THEN wp END), 0.5) AS wp_q4_mean,
           
           -- Situational play-calling
           COALESCE(AVG(CASE WHEN shotgun = 1 THEN 1.0 ELSE 0.0 END), 0) AS shotgun_rate,
           COALESCE(AVG(CASE WHEN no_huddle = 1 THEN 1.0 ELSE 0.0 END), 0) AS no_huddle_rate,
           
           -- Explosive plays
           COUNT(CASE WHEN pass = 1 AND yards_gained >= 20 THEN 1 END) AS explosive_pass,
           COUNT(CASE WHEN rush = 1 AND yards_gained >= 10 THEN 1 END) AS explosive_rush
           
    FROM plays
    WHERE posteam IS NOT NULL
    GROUP BY 1, 2
)
SELECT tg.game_id,
       tg.team,
       tg.is_home,
       tg.season,
       tg.week,
       tg.kickoff,
       tg.home_team,
       tg.away_team,
       tg.home_score,
       tg.away_score,
       tg.spread_close,
       tg.total_close,
       tg.points_for,
       tg.points_against,
       tg.stadium,
       tg.roof,
       tg.surface,
       tg.qb_id,
       tg.qb_name,
       tg.coach_name,
       tg.turnovers,
       tg.turnovers_opp,
       tg.penalties,
       tg.penalty_yards,
       tg.points_for - tg.points_against AS margin,
       
       -- Base EPA
       COALESCE(ts.epa_sum, 0) AS epa_sum,
       COALESCE(ts.plays, 0) AS plays,
       
       -- Advanced play metrics
       COALESCE(ts.success_rate, 0) AS success_rate,
       COALESCE(ts.air_yards_mean, 0) AS air_yards_mean,
       COALESCE(ts.yac_mean, 0) AS yac_mean,
       COALESCE(ts.cpoe_mean, 0) AS cpoe_mean,
       COALESCE(ts.completion_pct, 0) AS completion_pct,
       COALESCE(ts.wp_max, 0.5) AS wp_max,
       COALESCE(ts.wp_min, 0.5) AS wp_min,
       COALESCE(ts.wp_q4_mean, 0.5) AS wp_q4_mean,
       COALESCE(ts.shotgun_rate, 0) AS shotgun_rate,
       COALESCE(ts.no_huddle_rate, 0) AS no_huddle_rate,
       COALESCE(ts.explosive_pass, 0) AS explosive_pass,
       COALESCE(ts.explosive_rush, 0) AS explosive_rush
       
FROM team_games tg
LEFT JOIN team_stats ts
  ON ts.game_id = tg.game_id AND ts.team = tg.team
ORDER BY tg.team, tg.season, tg.week, tg.kickoff NULLS FIRST, tg.game_id;
': operator does not exist: boolean = integer
LINE 66:            COALESCE(AVG(CASE WHEN pass = 1 THEN air_yards EN...
                                                ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.

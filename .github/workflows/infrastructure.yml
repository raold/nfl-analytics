name: Infrastructure Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'db/migrations/**'
      - 'scripts/maintenance/**'
      - 'tests/infrastructure/**'
      - 'docker-compose.yml'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'db/migrations/**'
      - 'scripts/maintenance/**'
      - 'tests/infrastructure/**'
      - 'docker-compose.yml'
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5544
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: testpass123
  PYTHON_VERSION: '3.13'

jobs:
  # Test database migrations
  migration-tests:
    name: Migration Robustness Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5544:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5544 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run migration discovery tests
        run: |
          pytest tests/infrastructure/test_migrations.py::TestMigrationDiscovery -v

      - name: Run schema validation tests
        run: |
          pytest tests/infrastructure/test_migrations.py::TestMigrationSchemaValidation -v

      - name: Run data preservation tests
        run: |
          pytest tests/infrastructure/test_migrations.py::TestMigrationDataPreservation -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: migration-test-results
          path: |
            pytest-*.xml
            htmlcov/

  # Test backup and restore scripts
  backup-restore-tests:
    name: Backup & Restore Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5544:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client-16

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5544 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test database
        run: |
          # Create test schema
          PGPASSWORD=$POSTGRES_PASSWORD psql \
            -h localhost -p 5544 -U $POSTGRES_USER -d $POSTGRES_DB \
            -f db/migrations/001_initial_schema.sql || true

      - name: Make backup script executable
        run: chmod +x scripts/maintenance/backup.sh

      - name: Run backup script tests
        run: |
          pytest tests/infrastructure/test_backup_restore.py::TestBackupScript -v

      - name: Run backup verification tests
        run: |
          pytest tests/infrastructure/test_backup_restore.py::TestBackupMonitoring -v

      - name: Upload backup artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backup-test-artifacts
          path: |
            /tmp/*/nfl_analytics_*.backup
            /tmp/*/nfl_analytics_*.meta

  # Test Docker Compose infrastructure
  docker-compose-tests:
    name: Docker Compose Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Start Docker Compose services
        run: |
          docker-compose up -d postgres redis
          sleep 10

      - name: Run Docker Compose tests
        run: |
          pytest tests/infrastructure/test_docker_compose.py -v

      - name: Check service health
        run: |
          docker-compose ps
          docker-compose logs postgres
          docker-compose logs redis

      - name: Tear down services
        if: always()
        run: docker-compose down -v

  # Database performance monitoring
  performance-monitoring:
    name: Database Performance Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5544:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg[binary] pandas

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5544 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create performance metrics view
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql \
            -h localhost -p 5544 -U $POSTGRES_USER -d $POSTGRES_DB \
            -f db/views/db_performance_metrics.sql

      - name: Test performance metrics view
        run: |
          python -c "
          import psycopg
          import os

          conn = psycopg.connect(
              host='localhost',
              port=5544,
              dbname='$POSTGRES_DB',
              user='$POSTGRES_USER',
              password='$POSTGRES_PASSWORD'
          )

          with conn.cursor() as cur:
              cur.execute('SELECT * FROM db_performance_metrics;')
              result = cur.fetchone()
              print(f'✅ Performance metrics view working: {len(cur.description)} columns')

          conn.close()
          "

      - name: Run monitoring script
        run: |
          chmod +x scripts/maintenance/monitor_db.sh
          ./scripts/maintenance/monitor_db.sh --check-all

  # Weekly disaster recovery drill
  disaster-recovery-drill:
    name: Disaster Recovery Drill
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5544:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Install PostgreSQL client tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client-16

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5544 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create test data
        run: |
          PGPASSWORD=$POSTGRES_PASSWORD psql \
            -h localhost -p 5544 -U $POSTGRES_USER -d $POSTGRES_DB \
            -c "CREATE TABLE IF NOT EXISTS games (game_id TEXT PRIMARY KEY, season INT);"

          PGPASSWORD=$POSTGRES_PASSWORD psql \
            -h localhost -p 5544 -U $POSTGRES_USER -d $POSTGRES_DB \
            -c "INSERT INTO games VALUES ('2025_01_SF_PIT', 2025) ON CONFLICT DO NOTHING;"

      - name: Create backup
        run: |
          mkdir -p ~/nfl-analytics-backups
          export BACKUP_DIR=~/nfl-analytics-backups
          chmod +x scripts/maintenance/backup.sh
          ./scripts/maintenance/backup.sh

      - name: Verify backup exists
        run: |
          ls -lh ~/nfl-analytics-backups/*.backup
          ls -lh ~/nfl-analytics-backups/*.meta

      - name: Test backup integrity
        run: |
          BACKUP_FILE=$(ls ~/nfl-analytics-backups/*.backup | head -n1)
          pg_restore --list "$BACKUP_FILE" | head -n 20

      - name: Record drill results
        run: |
          echo "## Disaster Recovery Drill Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          BACKUP_FILE=$(ls ~/nfl-analytics-backups/*.backup | head -n1)
          BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)

          echo "**Backup Details**:" >> $GITHUB_STEP_SUMMARY
          echo "- Size: $BACKUP_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- File: $(basename $BACKUP_FILE)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**RTO Estimate**: < 30 minutes" >> $GITHUB_STEP_SUMMARY
          echo "**RPO**: 24 hours" >> $GITHUB_STEP_SUMMARY

  # Aggregate results
  infrastructure-summary:
    name: Infrastructure Tests Summary
    runs-on: ubuntu-latest
    needs: [migration-tests, backup-restore-tests, docker-compose-tests, performance-monitoring]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "## Infrastructure Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.migration-tests.result }}" == "success" ]]; then
            echo "✅ Migration tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Migration tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.backup-restore-tests.result }}" == "success" ]]; then
            echo "✅ Backup/restore tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backup/restore tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.docker-compose-tests.result }}" == "success" ]]; then
            echo "✅ Docker Compose tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker Compose tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.performance-monitoring.result }}" == "success" ]]; then
            echo "✅ Performance monitoring: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance monitoring: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if any test failed
        if: |
          needs.migration-tests.result != 'success' ||
          needs.backup-restore-tests.result != 'success' ||
          needs.docker-compose-tests.result != 'success' ||
          needs.performance-monitoring.result != 'success'
        run: |
          echo "One or more infrastructure tests failed"
          exit 1

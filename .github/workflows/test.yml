name: Test Suite

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual trigger

jobs:
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run unit tests
        run: |
          pytest tests/unit \
            -m unit \
            --cov=py \
            --cov-report=term-missing \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --junitxml=junit-unit.xml \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-unit.xml
          flags: unit
          name: unit-${{ matrix.python-version }}
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-unit-${{ matrix.python-version }}
          path: |
            junit-unit.xml
            htmlcov-unit/

  integration-tests:
    name: Integration Tests (Python + PostgreSQL)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg16
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      - name: Apply database schema
        env:
          PGPASSWORD: testpass
        run: |
          psql -h localhost -p 5432 -U testuser -d testdb -f db/001_init.sql
          psql -h localhost -p 5432 -U testuser -d testdb -f db/002_timescale.sql
      
      - name: Run integration tests
        env:
          TEST_DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        run: |
          pytest tests/integration \
            -m integration \
            --cov=py \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --junitxml=junit-integration.xml \
            -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-integration.xml
          flags: integration
          name: integration
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-integration
          path: |
            junit-integration.xml
            htmlcov-integration/

  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pip'
      
      - name: Install linters
        run: |
          pip install black ruff mypy types-requests
      
      - name: Check formatting (black)
        run: |
          black --check --diff py/
      
      - name: Lint (ruff)
        run: |
          ruff check py/ --output-format=github
      
      - name: Type check (mypy)
        run: |
          mypy py/ --ignore-missing-imports --warn-unused-ignores
        continue-on-error: true  # Don't fail CI on type errors initially

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install security tools
        run: pip install bandit safety
      
      - name: Run Bandit (security linter)
        run: |
          bandit -r py/ -f json -o bandit-report.json || true
          bandit -r py/ -f screen
        continue-on-error: true
      
      - name: Check for known vulnerabilities (safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, lint, security]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Unit tests: ${{ needs.unit-tests.result }}"
          echo "Integration tests: ${{ needs.integration-tests.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi
